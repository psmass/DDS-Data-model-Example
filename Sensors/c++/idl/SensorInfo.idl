module Common {
  const uint16 MIN_LEN = 100;
  const uint16 MED_LEN = 200;
  const uint16 MAX_LEN = 500;
    typedef string<Common::MAX_LEN> LargeString_t;
    typedef string<Common::MED_LEN> MediumString_t;
    typedef string<Common::MIN_LEN> ShortString_t;
    typedef Common::ShortString_t Descriptor_t;
  @default(0.0)
  typedef float Percentage_t;
  @default(0.0)
  typedef float PressureInPascal_t;
  @default(0.0)
  typedef float TemperatureInDegreesKelvin_t;
  @min(0.0)
  typedef float ConcentrationInMolesPerCubicMetre_t;
    typedef int16 BinaryData_t[Common::MAX_LEN];
  @nested
  @appendable
  struct IdentifierType_t {
        int32 resourceId;
        int32 id;
  };

    typedef sequence<Common::IdentifierType_t,Common::MAX_LEN> IdentifierList_t;
  @nested
  @appendable
  struct DateTime_t {
        int64 secs;
        int64 nsecs;
  };

  @nested
  @mutable
  struct MetaData_t {
        Common::DateTime_t timeOfGeneration;
  };

};
module Sensor {
  module Constants {
    const string HUMIDITY_TOPIC = "Humidity";
    const string PRESSURE_TOPIC = "Pressure";
    const string TEMPERATURE_TOPIC = "Temperature";
    const string GAS_TOPIC = "Gas";
    const string RELIABLE_QOS_PROFILE = "SensorQosLibrary::ReliableQosProfile";
    const string BEST_EFFORT_QOS_PROFILE = "SensorQosLibrary::BestEffortQosProfile";
  };
  @nested
  @appendable
  struct BaseSensor {
        @key
    Common::IdentifierType_t sourceId;
        Common::Descriptor_t sensorTypeName;
        Common::MetaData_t metaData;
  };

  @appendable
  struct HumiditySensor: Sensor::BaseSensor {
        Common::Percentage_t relativeHumidity;
  };

  @appendable
  struct PressureSensor: Sensor::BaseSensor {
        Common::PressureInPascal_t pressure;
  };

  @appendable
  struct TemperatureSensor: Sensor::BaseSensor {
        Common::TemperatureInDegreesKelvin_t temperature;
  };

  @appendable
  struct GasSensor: Sensor::BaseSensor {
        Common::ConcentrationInMolesPerCubicMetre_t concentration;
  };

};
